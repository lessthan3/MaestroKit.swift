// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0 effective-5.10 (swiftlang-6.0.0.9.10 clang-1600.0.26.2)
// swift-module-flags: -target x86_64-apple-tvos17-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -enable-bare-slash-regex -module-name MaestroKit
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
import Combine
import CoreText
import DeveloperToolsSupport
import Foundation
@_exported import MaestroKit
import RiveRuntime
import Swift
import SwiftUI
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import os.log
import os
@_Concurrency.MainActor @preconcurrency public struct MaestroOverlay : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public init(id: Swift.String, buttonPosition: CoreFoundation.CGPoint)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = @_opaqueReturnTypeOf("$s10MaestroKit0A7OverlayV4bodyQrvp", 0) __
}
public enum MaestroPanelType {
  case keyPlays
  case stats
  case fantasy
  case bets
  case shop
  public static func == (a: MaestroKit.MaestroPanelType, b: MaestroKit.MaestroPanelType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_Concurrency.MainActor @preconcurrency public struct MaestroPanel : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public init(width: CoreFoundation.CGFloat? = nil)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var topMarginView: some SwiftUICore.View {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var leftMarginView: some SwiftUICore.View {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var rightMarginView: some SwiftUICore.View {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var gradientMaskView: some SwiftUICore.View {
    get
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = @_opaqueReturnTypeOf("$s10MaestroKit0A5PanelV4bodyQrvp", 0) __
}
@_Concurrency.MainActor public protocol MaestroEventDelegate : AnyObject {
  @_Concurrency.MainActor func userRequestedNewKeyPlaysData()
  @_Concurrency.MainActor func playClip(atIndex index: Swift.Int)
  @_Concurrency.MainActor func shouldShowPanel()
  @_Concurrency.MainActor func shouldHidePanel()
  @_Concurrency.MainActor func shouldShowOverlay(id: Swift.String, buttonSize: CoreFoundation.CGSize)
  @_Concurrency.MainActor func shouldHideOverlay()
  @_Concurrency.MainActor func trackAction(analytics: [Swift.String : Swift.String])
  @_Concurrency.MainActor func trackImpression(analytics: [Swift.String : Swift.String])
  @_Concurrency.MainActor func userDidRequestLogin()
}
@_Concurrency.MainActor public protocol MaestroEventInterface : AnyObject {
  @_Concurrency.MainActor func updateKeyPlaysData(to newData: MaestroKit.MaestroKeyPlaysResponse?)
  @_Concurrency.MainActor func didStartPlayingClip(atIndex index: Swift.Int)
  @_Concurrency.MainActor func didStopPlayingClip(atIndex index: Swift.Int)
  @_Concurrency.MainActor func didFailToPlayClip(atIndex index: Swift.Int)
  @_Concurrency.MainActor func didUpdatePlaybackProgressOfClip(atIndex index: Swift.Int, to progress: Swift.Double)
  @_Concurrency.MainActor func didShowPanel()
  @_Concurrency.MainActor func didHidePanel()
  @_Concurrency.MainActor func didShowOverlay()
  @_Concurrency.MainActor func didHideOverlay()
  @_Concurrency.MainActor func currentEventDoesNotSupportKeyPlays()
  @_Concurrency.MainActor func getCurrentEventID() -> Swift.String?
  @_Concurrency.MainActor func getCurrentlyPlayingClipIndex() -> Swift.Int?
  @_Concurrency.MainActor func getLastPlayedClipIndex() -> Swift.Int?
  @_Concurrency.MainActor func getCurrentClipPlaybackProgress() -> Swift.Double?
  @_Concurrency.MainActor func getKeyPlaysCount() -> Swift.Int?
  @_Concurrency.MainActor func simulateUseCase(_ useCase: MaestroKit.TestUseCase, forPanel panelType: MaestroKit.MaestroPanelType, testData: Any?)
}
@_Concurrency.MainActor public class MaestroEventViewModel : Combine.ObservableObject, MaestroKit.MaestroManagerViewModelDelegate {
  @_Concurrency.MainActor public func userIsAuthenticated() async -> Swift.Bool
  @_Concurrency.MainActor public init(eventID: Swift.String, eventDelegate: any MaestroKit.MaestroEventDelegate, viewModelDelegate: any MaestroKit.MaestroManagerViewModelDelegate)
  @objc deinit
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
}
extension MaestroKit.MaestroEventViewModel : MaestroKit.MaestroEventInterface {
  @_Concurrency.MainActor public func updateKeyPlaysData(to newData: MaestroKit.MaestroKeyPlaysResponse?)
  @_Concurrency.MainActor public func didStartPlayingClip(atIndex index: Swift.Int)
  @_Concurrency.MainActor public func didStopPlayingClip(atIndex index: Swift.Int)
  @_Concurrency.MainActor public func didFailToPlayClip(atIndex index: Swift.Int)
  @_Concurrency.MainActor public func didUpdatePlaybackProgressOfClip(atIndex index: Swift.Int, to progress: Swift.Double)
  @_Concurrency.MainActor public func focusOnFirstKeyPlay()
  @_Concurrency.MainActor public func didShowPanel()
  @_Concurrency.MainActor public func didHidePanel()
  @_Concurrency.MainActor public func didShowOverlay()
  @_Concurrency.MainActor public func didHideOverlay()
  @_Concurrency.MainActor public func currentEventDoesNotSupportKeyPlays()
  @_Concurrency.MainActor public func getCurrentEventID() -> Swift.String?
  @_Concurrency.MainActor public func getCurrentlyPlayingClipIndex() -> Swift.Int?
  @_Concurrency.MainActor public func getLastPlayedClipIndex() -> Swift.Int?
  @_Concurrency.MainActor public func getCurrentClipPlaybackProgress() -> Swift.Double?
  @_Concurrency.MainActor public func getKeyPlaysCount() -> Swift.Int?
  @_Concurrency.MainActor public func simulateUseCase(_ useCase: MaestroKit.TestUseCase, forPanel panelType: MaestroKit.MaestroPanelType, testData: Any?)
}
@_hasMissingDesignatedInitializers public actor MaestroManager {
  public static let shared: MaestroKit.MaestroManager
  public func setSiteID(_ siteID: Swift.String?)
  public func setMaestroJwt(_ jwt: Swift.String?)
  public func setClientAppSwid(_ swid: Swift.String?)
  public func setClientAppJwt(_ jwt: Swift.String?)
  @objc deinit
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  @_semantics("defaultActor") nonisolated final public var unownedExecutor: _Concurrency.UnownedSerialExecutor {
    get
  }
}
extension MaestroKit.MaestroManager : MaestroKit.MaestroManagerInterface {
  nonisolated public func configure(siteID: Swift.String, jwt: Swift.String)
  nonisolated public func userDidStartWatchingEvent(eventID: Swift.String, delegate: any MaestroKit.MaestroEventDelegate) async -> any MaestroKit.MaestroEventInterface
  nonisolated public func userDidStopWatchingEvent(_ eventID: Swift.String) async
  nonisolated public func authenticateUser(swid: Swift.String, jwt: Swift.String) async
  nonisolated public func deauthenticateUser() async
  nonisolated public func getCurrentSiteID() async -> Swift.String?
  nonisolated public func getCurrentJwt() async -> Swift.String?
  nonisolated public func getCurrentSwid() async -> Swift.String?
}
extension MaestroKit.MaestroManager : @preconcurrency MaestroKit.MaestroManagerViewModelDelegate {
  public func userIsAuthenticated() async -> Swift.Bool
  @_Concurrency.MainActor public func getKeyPlaysCount() -> Swift.Int?
  @_Concurrency.MainActor public func getCurrentEventID() -> Swift.String?
}
public protocol MaestroManagerInterface {
  nonisolated func configure(siteID: Swift.String, jwt: Swift.String)
  nonisolated func userDidStartWatchingEvent(eventID: Swift.String, delegate: any MaestroKit.MaestroEventDelegate) async -> any MaestroKit.MaestroEventInterface
  nonisolated func userDidStopWatchingEvent(_ eventID: Swift.String) async
  nonisolated func authenticateUser(swid: Swift.String, jwt: Swift.String) async
  nonisolated func deauthenticateUser() async
  nonisolated func getCurrentSiteID() async -> Swift.String?
  nonisolated func getCurrentJwt() async -> Swift.String?
  nonisolated func getCurrentSwid() async -> Swift.String?
}
public protocol MaestroManagerViewModelDelegate : AnyObject {
  func userIsAuthenticated() async -> Swift.Bool
  func getKeyPlaysCount() -> Swift.Int?
  func getCurrentEventID() -> Swift.String?
}
public struct SiteResponse : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct MaestroKeyPlaysResponse : Swift.Decodable, Swift.Equatable, Swift.Hashable {
  public let teams: [MaestroKit.MaestroKeyPlaysTeam]?
  public let athletes: [MaestroKit.MaestroKeyPlaysAthlete]?
  public let sections: [MaestroKit.MaestroKeyPlaysSection]?
  public init(teams: [MaestroKit.MaestroKeyPlaysTeam]? = nil, athletes: [MaestroKit.MaestroKeyPlaysAthlete]? = nil, sections: [MaestroKit.MaestroKeyPlaysSection]? = nil)
  public var keyPlayCount: Swift.Int {
    get
  }
  public var summary: Swift.String {
    get
  }
  public static func == (a: MaestroKit.MaestroKeyPlaysResponse, b: MaestroKit.MaestroKeyPlaysResponse) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct MaestroKeyPlaysTeam : Swift.Decodable, Swift.Identifiable, Swift.Equatable, Swift.Hashable {
  public let id: Swift.String
  public let displayName: Swift.String?
  public let shortName: Swift.String?
  public let color: Swift.String?
  public let alternateColor: Swift.String?
  public let homeAway: Swift.String?
  public let displayOrder: Swift.String?
  public let logo: Swift.String?
  public let logoDark: Swift.String?
  public init(id: Swift.String, displayName: Swift.String? = nil, shortName: Swift.String? = nil, color: Swift.String? = nil, alternateColor: Swift.String? = nil, homeAway: Swift.String? = nil, displayOrder: Swift.String? = nil, logo: Swift.String? = nil, logoDark: Swift.String? = nil)
  public static func == (a: MaestroKit.MaestroKeyPlaysTeam, b: MaestroKit.MaestroKeyPlaysTeam) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias ID = Swift.String
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct MaestroKeyPlaysAthlete : Swift.Decodable, Swift.Identifiable, Swift.Equatable, Swift.Hashable {
  public let id: Swift.String
  public let shortName: Swift.String?
  public let headshot: Swift.String?
  public init(id: Swift.String, shortName: Swift.String? = nil, headshot: Swift.String? = nil)
  public static func == (a: MaestroKit.MaestroKeyPlaysAthlete, b: MaestroKit.MaestroKeyPlaysAthlete) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias ID = Swift.String
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct MaestroKeyPlaysSection : Swift.Decodable, Swift.Equatable, Swift.Hashable {
  public let title: Swift.String?
  public let items: [MaestroKit.MaestroKeyPlay]?
  public init(title: Swift.String? = nil, items: [MaestroKit.MaestroKeyPlay]? = nil)
  public static func == (a: MaestroKit.MaestroKeyPlaysSection, b: MaestroKit.MaestroKeyPlaysSection) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct MaestroKeyPlay : Swift.Decodable, Swift.Identifiable, Swift.Equatable, Swift.Hashable {
  public let id: Swift.String
  public let description: Swift.String?
  public let team: Swift.String?
  public let wallClock: Swift.String?
  public let clock: Swift.String?
  public let shortPeriod: Swift.String?
  public let scoringPlay: Swift.Bool?
  public let athlete: Swift.String?
  public let thumbnail: Swift.String?
  public let clipID: Swift.String
  public let awayScore: Swift.String?
  public let homeScore: Swift.String?
  public init(description: Swift.String? = nil, team: Swift.String? = nil, wallClock: Swift.String? = nil, clock: Swift.String? = nil, shortPeriod: Swift.String? = nil, scoringPlay: Swift.Bool? = nil, athlete: Swift.String? = nil, thumbnail: Swift.String? = nil, clipID: Swift.String, awayScore: Swift.String? = nil, homeScore: Swift.String? = nil)
  public init(from decoder: any Swift.Decoder) throws
  public static func == (a: MaestroKit.MaestroKeyPlay, b: MaestroKit.MaestroKeyPlay) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias ID = Swift.String
  public var hashValue: Swift.Int {
    get
  }
}
public enum TestUseCase {
  case enableMockBetsData
  case enableLiveBetsData
  case betsTabLoadFailure
  case sixPackPreGameHomeTeamFavored
  case sixPackPreGameAwayTeamFavored
  case sixPackPostGameHomeTeamFavored
  case sixPackPostGameAwayTeamFavored
  case sixPackDuringGameHomeTeamFavored
  case sixPackDuringGameAwayTeamFavored
  case myBetsStraightBetWon
  case myBetsStraightBetLost
  case myBetsStraightBetPending
  case myBetsTeaserBetWon
  case myBetsTeaserBetLost
  case myBetsTeaserBetPending
  case myBetsBoostBetWon
  case myBetsBoostBetLost
  case myBetsBoostBetPending
  case myBetsParlayBetWon
  case myBetsParlayBetLost
  case myBetsParlayBetPending
  case myBetsParlayBetUnsettled
  case winningBetWithOverlay
  case simulateFantasyUserWithLeagues
  case simulateFantasyUserWithoutLeagues
  case enableMockFantasyData
  case enableLiveFantasyData
  public static func == (a: MaestroKit.TestUseCase, b: MaestroKit.TestUseCase) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension MaestroKit.MaestroOverlay : Swift.Sendable {}
extension MaestroKit.MaestroPanelType : Swift.Equatable {}
extension MaestroKit.MaestroPanelType : Swift.Hashable {}
extension MaestroKit.MaestroPanel : Swift.Sendable {}
extension MaestroKit.MaestroEventViewModel : Swift.Sendable {}
extension MaestroKit.TestUseCase : Swift.Equatable {}
extension MaestroKit.TestUseCase : Swift.Hashable {}
